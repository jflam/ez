#!/usr/bin/env bash

# Build a container image on the VM. The container image is created the first time
# this script is executed by the jupyter-repo2docker tool. The layers for the image
# will be cached on the local disk of the VM resulting in much faster startup times
# for subsequent invocations of the command.

# The container name is the same as the environment name. When the container is 
# terminated by the client, the container image is force stopped and removed.

# The github repo that provides the definition of the container image contents
# is optionally cloned onto the VM and then mounted onto the VM.

set -o nounset   # fail on uninitialized variable references

# These next two options should likely be turned on only in debug mode

set -o errexit   # exit on error on commands -- probably should do this only in debug mode
set -o pipefail  # exit status of last command that threw non-zero exit code is returned

port="8888"
user_id="1000"
env_name=""
git_repo=""
user_name="ezuser"
patch_file="" 
repo_path=""
git_clone=1

# Parse command line arguments

while (( $# > 0 )); do
    case $1 in 
        -n | --env-name )           shift
                                    env_name=$1
                                    ;;
        -g | --git-repo )           shift 
                                    git_repo=$1
                                    ;;
        -p | --port )               shift 
                                    port=$1
                                    ;;
        -a | --user-name )          shift
                                    user_name=$1
                                    ;;
        -r | --repo-path )          shift
                                    repo_path=$1
                                    ;;
        -c | --git-clone )          git_clone=0
                                    ;;
        -f | --patch-file )         shift
                                    patch_file=$1
                                    ;;
    esac 
    shift
done 

echo "  ${user_name}@$(hostname): VALIDATING command line arguments"

if [ "$env_name" == "" ]; then
    echo "missing mandatory parameter --env-name"
    exit 1
fi

if [ "$git_repo" == "" ]; then
    echo "missing mandatory parameter --git-repo"
    exit 1
fi

if [ "$port" == "" ]; then
    echo "missing mandatory parameter --port"
    exit 1
fi

# workaround for conda bug: https://github.com/conda/conda/issues/8186

export PS1=

# Activate conda

echo "  ${user_name}@$(hostname): ACTIVATING conda"

eval "$(/opt/miniconda/bin/conda shell.bash hook)" 
eval "$(conda shell.bash hook)" 
conda init # > /dev/null

if [[ $repo_path == "" ]]; then
    repo_path="./repo"

    # Remote builds do not pass in a --repo-path parameter
    # Remote builds will clone the git repo into ~/easy/env/$env_name/repo directory

    mkdir -p ~/easy/env/$env_name 
    cd ~/easy/env/$env_name

    if [ ! -d repo ]; then 
        echo "${user_name}@$(hostname): CLONING ${git_repo}"
        git clone $git_repo $repo_path
    else
        if [[ $git_clone == 0 ]]; then
            rm -rf $repo_path 
            git clone $git_repo $repo_path
        fi
    fi
fi

# Apply patch file if caller passed a reference to the file
if [[ $patch_file != "" ]]; then
    echo "  ${user_name}@$(hostname): APPLYING patchfile ${patch_file}"
    cd ~/easy/env/$env_name/repo
    git apply /home/$user_name/tmp/${patch_file}
    cd ~/easy/env/$env_name
fi

echo "  ${user_name}@$(hostname): BUILDING container image using repo2docker"
jupyter-repo2docker --no-run --image-name $env_name --user-id $user_id --user-name $user_name $repo_path

exit 0