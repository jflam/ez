#!/usr/bin/env bash

# Script to provision a GPU machine
#
# Note that any bash variables set by this script need to be used from the 
# same logical line, i.e., they need to be concatenated using the && operator

## UPDATING system software
sudo apt update
sudo apt upgrade -y

## INSTALLING build-essential
sudo apt install build-essential -y

## INSTALLING cuda-drivers
# https://docs.nvidia.com/datacenter/tesla/tesla-installation-notes/index.html#ubuntu-lts

# Ensure packages from CUDA repo have precedence over Canonical repo
distribution=$(. /etc/os-release;echo $ID$VERSION_ID | sed -e 's/\.//g') \
  && wget https://developer.download.nvidia.com/compute/cuda/repos/$distribution/x86_64/cuda-$distribution.pin \
  && sudo mv cuda-$distribution.pin /etc/apt/preferences.d/cuda-repository-pin-600 \
  && sudo apt-key adv --fetch-keys \
     https://developer.download.nvidia.com/compute/cuda/repos/$distribution/x86_64/7fa2af80.pub \
  && echo "deb http://developer.download.nvidia.com/compute/cuda/repos/$distribution/x86_64 /" | \
     sudo tee /etc/apt/sources.list.d/cuda.list

sudo apt update
sudo apt install -y cuda-drivers

# Install Docker with CUDA support
# https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html

## INSTALLING Docker
curl https://get.docker.com | sh && sudo systemctl --now enable docker

## INSTALLING nvidia-docker2
# Update repository links
distribution=$(. /etc/os-release;echo $ID$VERSION_ID) \
   && curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add - \
   && curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list \
   && curl -s -L https://nvidia.github.io/nvidia-container-runtime/experimental/$distribution/nvidia-container-runtime.list | sudo tee /etc/apt/sources.list.d/nvidia-container-runtime.list

sudo apt update
sudo apt install -y nvidia-docker2

## CONFIGURING Docker to run without sudo
# https://docs.docker.com/engine/install/linux-postinstall/
sudo usermod -aG docker $USER

# Note that this script requires a reboot of the machine before the 
# installation can be considered to be successful.