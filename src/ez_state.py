import constants as C
import json, os

from os import path
from datetime import datetime

class Ez(object):
    """
Ez represents a single workspace configuration, and contains type hints to
make it easier to use the type in different places in the code. Ez objects are
generated by EzConfig which handles reading and writing Ez objects to/from the
master config store in ~/.ez.json.

Ez never stores secrets in the config file; secrets are stored elsewhere,
typically in ~/.ssh or transiently by querying GitHub or Azure.
"""
    # Options
    debug: str
    trace: str
    insiders: bool
    disable_jit: bool

    # Workspace
    workspace_name: str
    resource_group: str
    registry_name: str
    storage_account_name: str
    file_share_name: str
    subscription: str
    region: str
    private_key_path: str
    user_name: str

    # Remotes
    active_remote_compute: str 
    active_remote_compute_type: str 
    active_remote_env: str

    # Authentication state
    last_auth_check: datetime

    # Runtime state
    logged_in: bool
    jit_activated: bool

    def __init__(self, debug: bool=False, trace: bool=False, 
        insiders: bool=False, disable_jit=False, config_json: str=None):
        if config_json is not None:
            self.load_json(config_json)
        else:
            # TODO: see if we keep this
            self.load()

        self.debug = debug 
        self.trace = trace
        self.insiders = insiders
        self.logged_in = False
        self.jit_activated = False
        self.disable_jit = disable_jit
        if disable_jit:
            self.jit_activated = True

    def load_json(self, config_json: json):
        self.workspace_name = config_json["workspace_name"]
        self.resource_group = config_json["resource_group"]
        self.registry_name = config_json["registry_name"]
        self.storage_account_name = config_json["storage_account_name"]
        self.file_share_name = config_json["file_share_name"]
        self.subscription = config_json["subscription"]
        self.region = config_json["region"]
        self.private_key_path = config_json["private_key_path"]
        self.user_name = config_json["user_name"]
        self.active_remote_compute = config_json["active_compute"]
        self.active_remote_compute_type = config_json["active_compute_type"]
        self.active_remote_env = config_json["active_env"]
        self.last_auth_check = datetime.strptime(
            config_json["last_auth_check"], "%c")

    def load(self):
        """Load configuration settings from ~/.ez.json"""
        config_path = os.path.expanduser(C.WORKSPACE_CONFIG)

        # TODO: handle older versions of .ez.json gracefully
        if path.exists(config_path):
            with open(config_path, "r") as f:
                self.load_json(json.load(f))
        else:
            self.workspace_name = None
            self.resource_group = None 
            self.registry_name = None
            self.storage_account_name = None
            self.file_share_name = None
            self.subscription = None
            self.region = None
            self.private_key_path = None
            self.user_name = None
            self.active_remote_compute = None
            self.active_remote_compute_type = None
            self.active_remote_env = None
            self.last_auth_check = datetime.now()

    def get_dict(self):
        return {
            "workspace_name": self.workspace_name,
            "resource_group": self.resource_group,
            "registry_name": self.registry_name,
            "storage_account_name": self.storage_account_name,
            "file_share_name": self.file_share_name,
            "subscription": self.subscription,
            "region": self.region,
            "private_key_path": self.private_key_path,
            "user_name": self.user_name,
            "active_compute": self.active_remote_compute,
            "active_compute_type": self.active_remote_compute_type,
            "active_env": self.active_remote_env,
            "last_auth_check": datetime.strftime(self.last_auth_check, "%c")
        }

    def save(self):
        """Save configuration settings to ~/.ez.json"""
        config_path = os.path.expanduser(C.WORKSPACE_CONFIG)
        ez_config = self.get_dict() 
        with open(config_path, "w") as f:
            json.dump(ez_config, f, indent=4)

    def debug_print(self, str):
        if self.debug:
            print(str)

class EzConfig:
    """Manages ez workspaces in ~/.ez.json configuration file

    The ~/.ez.json file contains a dictionary of workspace metadata. Each
    workspace is represented by an Ez object. The workspace_name property of
    the workspace object is the key into the master dictionary stored in 
    ~/.ez.json.
    """
    def __init__(self, ez_config_path: str="~/.ez.json"):
        """Creates and inits new EzConfig object

        Loads the configuration from ~/.ez.json or a caller-provided path

        Args:
            ez_config_path (str, optional): [description]. Defaults to "~/.ez.json".
        """
        self.load(ez_config_path)

    def load(self, ez_config_path: str="~/.ez.json") -> None:
        """Load configuration 

        Loads the configuration from ~/.ez.json or a caller-provided path

        Args:
            ez_config_path (str, optional): config path. Defaults to "~/.ez.json".
        """
        with open(os.path.expanduser(ez_config_path), "rt") as f:
            self.config = json.load(f)

    def update(self, ez: Ez) -> None:
        """Update configuration using this workspace config

        Args:
            ez (Ez): workspace config to update
        """
        self.config["workspaces"][ez.workspace_name] = ez.get_dict()

    def save(self, ez: Ez, ez_config_path: str="~/.ez.json") -> None:
        """Save current configuration

        Writes the configuration to ~/.ez.json or a caller-provided path.

        Args:
            ez (Ez): [description]
            ez_config_path (str, optional): config path. Defaults to "~/.ez.json".
        """
        self.config["workspaces"][ez.workspace_name] = ez.get_dict()
        with open(os.path.expanduser(ez_config_path), "w") as f:
            json.dump(self.config, f)

    def select(self, workspace_name: str) -> Ez:
        """Selects workspace_name as current workspace

        Args:
            workspace_name (str): Workspace name

        Returns:
            Ez: configuration object for selected workspace
        """
        self.config["current_workspace"] = workspace_name
        return Ez(config_json=self.config["workspaces"][workspace_name])

    def add(self, ez: Ez, replace: bool=False) -> None:
        """Add a new Ez configuration to the global configuration object

        Adds ez to the EzConfig dictionary and also sets it as the current
        workspace.

        Args:
            ez (Ez): an Ez object that contains a configuration to add
            replace (bool): replace an existing configuration (default False) 

        Raises:
            ValueError: if the workspace_name of ez object already exists and replace
            is false
        """
        if ez.workspace_name in self.config["workspaces"]:
            raise ValueError(f"workspace {ez.workspace_name} already exists "
                f"in configuration. Use replace=True to replace")
        self.config["current_workspace"] = ez.workspace_name
        self.config["workspaces"][ez.workspace_name] = ez.get_dict()

    def current(self) -> Ez:
        """Selects the current workspace 

        Returns:
            Ez: configuration object for current workspace
        """
        current_workspace = self.config["current_workspace"]
        return Ez(config_json=self.config["workspaces"][current_workspace])